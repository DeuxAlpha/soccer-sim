// <auto-generated />
using System;
using Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(SoccerSimContext))]
    [Migration("20230516205056_AddTeamFlags")]
    partial class AddTeamFlags
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Database.Models.Competition", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ActionsPerMinute")
                        .HasColumnType("int");

                    b.Property<string>("CompetitionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContinentName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CountryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DivisionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LeagueName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("MaxAwayDisadvantage")
                        .HasColumnType("float");

                    b.Property<double>("MaxHomeAdvantage")
                        .HasColumnType("float");

                    b.Property<double>("MaxProgressChance")
                        .HasColumnType("float");

                    b.Property<double>("MinProgressChance")
                        .HasColumnType("float");

                    b.Property<double>("PaceModifier")
                        .HasColumnType("float");

                    b.Property<double>("ShotAccuracyModifier")
                        .HasColumnType("float");

                    b.Property<bool>("TournamentOnNeutralGrounds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Name", "Season");

                    b.HasIndex("ContinentName", "Season");

                    b.HasIndex("CountryName", "Season");

                    b.HasIndex("DivisionName", "Season");

                    b.HasIndex("LeagueName", "Season");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Database.Models.CompetitionRound", b =>
                {
                    b.Property<string>("CompetitionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<string>("ComparisonRule")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Default");

                    b.Property<string>("ReverseFixtureStructure")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Default");

                    b.HasKey("CompetitionName", "Season", "Round");

                    b.ToTable("CompetitionRounds");
                });

            modelBuilder.Entity("Database.Models.CompetitionRoundFixture", b =>
                {
                    b.Property<string>("CompetitionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("GameDayNumber")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AwayTeamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ActionsPerMinute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<int?>("AwayPossession")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("HalfFieldLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<int?>("HomePossession")
                        .HasColumnType("int");

                    b.Property<double>("MaxAwayDisadvantage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("MaxHomeAdvantage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("MaxOvertime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(8);

                    b.Property<double>("PaceModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<double>("ShotAccuracyModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.HasKey("CompetitionName", "Season", "RoundNumber", "GameDayNumber", "HomeTeamName", "AwayTeamName");

                    b.HasIndex("AwayTeamName", "Season");

                    b.HasIndex("HomeTeamName", "Season");

                    b.HasIndex("CompetitionName", "Season", "RoundNumber", "GroupName", "GameDayNumber");

                    b.ToTable("CompetitionFixtures");
                });

            modelBuilder.Entity("Database.Models.CompetitionRoundFixtureEvent", b =>
                {
                    b.Property<string>("CompetitionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("GameDayNumber")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AwayTeamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<int?>("AddedMinute")
                        .HasColumnType("int");

                    b.Property<string>("EventTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsGoal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShotOnGoal")
                        .HasColumnType("bit");

                    b.HasKey("CompetitionName", "Season", "RoundNumber", "GameDayNumber", "HomeTeamName", "AwayTeamName", "Minute", "AddedMinute");

                    b.HasIndex("EventTeamName", "Season");

                    b.ToTable("CompetitionFixtureEvents");
                });

            modelBuilder.Entity("Database.Models.CompetitionRoundGameDay", b =>
                {
                    b.Property<string>("CompetitionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GameDayNumber")
                        .HasColumnType("int");

                    b.HasKey("CompetitionName", "Season", "RoundNumber", "GroupName", "GameDayNumber");

                    b.ToTable("CompetitionGameDays");
                });

            modelBuilder.Entity("Database.Models.CompetitionRoundGroup", b =>
                {
                    b.Property<string>("CompetitionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rounds")
                        .HasColumnType("int");

                    b.HasKey("CompetitionName", "Season", "RoundNumber", "GroupName");

                    b.ToTable("CompetitionGroups");
                });

            modelBuilder.Entity("Database.Models.Continent", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Name", "Season");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("Database.Models.Country", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<double>("AttackStrength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(600.0);

                    b.Property<string>("ContinentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("DefenseStrength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(600.0);

                    b.Property<double>("GoalieStrength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(600.0);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(40);

                    b.Property<double>("PotentialNegativeChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.10000000000000001);

                    b.Property<double>("PotentialNegativeShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(10.0);

                    b.Property<double>("PotentialPositiveChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.10000000000000001);

                    b.Property<double>("PotentialPositiveShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(10.0);

                    b.Property<double>("ShotOnGoalRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.40000000000000002);

                    b.HasKey("Name", "Season");

                    b.HasIndex("ContinentName", "Season");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Database.Models.Division", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("OnlyFirstTeams")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Name", "Season");

                    b.HasIndex("CountryName", "Season");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("Database.Models.League", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ActionsPerMinute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxAwayDisadvantage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("MaxHomeAdvantage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("MaxProgressChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.69999999999999996);

                    b.Property<double>("MinProgressChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.29999999999999999);

                    b.Property<double>("PaceModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<int>("Rounds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<double>("ShotAccuracyModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.HasKey("Name", "Season");

                    b.HasIndex("DivisionName", "Season");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Database.Models.LeagueFixture", b =>
                {
                    b.Property<string>("LeagueName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("GameDayNumber")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AwayTeamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ActionsPerMinute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<int?>("AwayPossession")
                        .HasColumnType("int");

                    b.Property<int>("HalfFieldLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<int?>("HomePossession")
                        .HasColumnType("int");

                    b.Property<double>("MaxAwayDisadvantage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("MaxHomeAdvantage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("MaxOvertime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(8);

                    b.Property<double>("PaceModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.Property<double>("ShotAccuracyModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.HasKey("LeagueName", "Season", "GameDayNumber", "HomeTeamName", "AwayTeamName");

                    b.HasIndex("AwayTeamName", "Season");

                    b.HasIndex("HomeTeamName", "Season");

                    b.ToTable("LeagueFixtures");
                });

            modelBuilder.Entity("Database.Models.LeagueFixtureEvent", b =>
                {
                    b.Property<string>("LeagueName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("GameDayNumber")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AwayTeamName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<int?>("AddedMinute")
                        .HasColumnType("int");

                    b.Property<string>("EventTeamName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsGoal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShotOnGoal")
                        .HasColumnType("bit");

                    b.HasKey("LeagueName", "Season", "GameDayNumber", "HomeTeamName", "AwayTeamName", "Minute", "AddedMinute");

                    b.HasIndex("EventTeamName", "Season");

                    b.ToTable("LeagueFixtureEvents");
                });

            modelBuilder.Entity("Database.Models.LeagueGameDay", b =>
                {
                    b.Property<string>("LeagueName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("GameDayNumber")
                        .HasColumnType("int");

                    b.HasKey("LeagueName", "Season", "GameDayNumber");

                    b.ToTable("LeagueGameDays");
                });

            modelBuilder.Entity("Database.Models.PromotionSystem", b =>
                {
                    b.Property<string>("LeagueName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PromotedTeamsEnd")
                        .HasColumnType("int");

                    b.Property<int>("PromotedTeamsStart")
                        .HasColumnType("int");

                    b.Property<int>("PromotionPlayOffTeamsEnd")
                        .HasColumnType("int");

                    b.Property<int>("PromotionPlayOffTeamsStart")
                        .HasColumnType("int");

                    b.Property<int>("RelegatedTeamsEnd")
                        .HasColumnType("int");

                    b.Property<int>("RelegatedTeamsStart")
                        .HasColumnType("int");

                    b.Property<int>("RelegationPlayOffTeamsEnd")
                        .HasColumnType("int");

                    b.Property<int>("RelegationPlayOffTeamsStart")
                        .HasColumnType("int");

                    b.HasKey("LeagueName", "Season");

                    b.ToTable("PromotionSystems");
                });

            modelBuilder.Entity("Database.Models.Team", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Season")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<double>("AttackStrength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(600.0);

                    b.Property<bool>("ChampionFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("DefenseStrength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(600.0);

                    b.Property<double>("GoalieStrength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(600.0);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MaxPace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(40);

                    b.Property<bool>("NotFirstTeam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("PotentialNegativeChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("PotentialNegativeShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("PotentialPositiveChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("PotentialPositiveShift")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<bool>("PromotionFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RelegationFlag")
                        .HasColumnType("bit");

                    b.Property<double>("ShotOnGoalRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.40000000000000002);

                    b.HasKey("Name", "Season");

                    b.HasIndex("LeagueName", "Season");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Database.Models.Competition", b =>
                {
                    b.HasOne("Database.Models.Continent", "Continent")
                        .WithMany("Competitions")
                        .HasForeignKey("ContinentName", "Season")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.Country", "Country")
                        .WithMany("Competitions")
                        .HasForeignKey("CountryName", "Season")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.Division", "Division")
                        .WithMany("Competitions")
                        .HasForeignKey("DivisionName", "Season")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Database.Models.League", "League")
                        .WithMany("Competitions")
                        .HasForeignKey("LeagueName", "Season")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Continent");

                    b.Navigation("Country");

                    b.Navigation("Division");

                    b.Navigation("League");
                });

            modelBuilder.Entity("Database.Models.CompetitionRound", b =>
                {
                    b.HasOne("Database.Models.Competition", "Competition")
                        .WithMany("Rounds")
                        .HasForeignKey("CompetitionName", "Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("Database.Models.CompetitionRoundFixture", b =>
                {
                    b.HasOne("Database.Models.Team", "AwayTeam")
                        .WithMany("AwayCompetitionFixtures")
                        .HasForeignKey("AwayTeamName", "Season")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.Competition", "Competition")
                        .WithMany("Fixtures")
                        .HasForeignKey("CompetitionName", "Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.Team", "HomeTeam")
                        .WithMany("HomeCompetitionFixtures")
                        .HasForeignKey("HomeTeamName", "Season")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.CompetitionRoundGameDay", "GameDay")
                        .WithMany("Fixtures")
                        .HasForeignKey("CompetitionName", "Season", "RoundNumber", "GroupName", "GameDayNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("Competition");

                    b.Navigation("GameDay");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("Database.Models.CompetitionRoundFixtureEvent", b =>
                {
                    b.HasOne("Database.Models.Team", "EventTeam")
                        .WithMany("CompetitionFixtureEvents")
                        .HasForeignKey("EventTeamName", "Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.CompetitionRoundFixture", "Fixture")
                        .WithMany("Events")
                        .HasForeignKey("CompetitionName", "Season", "RoundNumber", "GameDayNumber", "HomeTeamName", "AwayTeamName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventTeam");

                    b.Navigation("Fixture");
                });

            modelBuilder.Entity("Database.Models.CompetitionRoundGameDay", b =>
                {
                    b.HasOne("Database.Models.CompetitionRoundGroup", "Group")
                        .WithMany("GameDays")
                        .HasForeignKey("CompetitionName", "Season", "RoundNumber", "GroupName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Database.Models.CompetitionRoundGroup", b =>
                {
                    b.HasOne("Database.Models.CompetitionRound", "Round")
                        .WithMany("Groups")
                        .HasForeignKey("CompetitionName", "Season", "RoundNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Database.Models.Country", b =>
                {
                    b.HasOne("Database.Models.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentName", "Season")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("Database.Models.Division", b =>
                {
                    b.HasOne("Database.Models.Country", "Country")
                        .WithMany("Divisions")
                        .HasForeignKey("CountryName", "Season")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Database.Models.League", b =>
                {
                    b.HasOne("Database.Models.Division", "Division")
                        .WithMany("Leagues")
                        .HasForeignKey("DivisionName", "Season")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("Database.Models.LeagueFixture", b =>
                {
                    b.HasOne("Database.Models.Team", "AwayTeam")
                        .WithMany("AwayLeagueFixtures")
                        .HasForeignKey("AwayTeamName", "Season")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.Team", "HomeTeam")
                        .WithMany("HomeLeagueFixtures")
                        .HasForeignKey("HomeTeamName", "Season")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Database.Models.League", "League")
                        .WithMany("LeagueFixtures")
                        .HasForeignKey("LeagueName", "Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.LeagueGameDay", "GameDay")
                        .WithMany("Fixtures")
                        .HasForeignKey("LeagueName", "Season", "GameDayNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("GameDay");

                    b.Navigation("HomeTeam");

                    b.Navigation("League");
                });

            modelBuilder.Entity("Database.Models.LeagueFixtureEvent", b =>
                {
                    b.HasOne("Database.Models.Team", "EventTeam")
                        .WithMany("LeagueFixtureEvents")
                        .HasForeignKey("EventTeamName", "Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.LeagueFixture", "Fixture")
                        .WithMany("Events")
                        .HasForeignKey("LeagueName", "Season", "GameDayNumber", "HomeTeamName", "AwayTeamName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventTeam");

                    b.Navigation("Fixture");
                });

            modelBuilder.Entity("Database.Models.LeagueGameDay", b =>
                {
                    b.HasOne("Database.Models.League", "League")
                        .WithMany("GameDays")
                        .HasForeignKey("LeagueName", "Season")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("Database.Models.PromotionSystem", b =>
                {
                    b.HasOne("Database.Models.League", "League")
                        .WithOne("PromotionSystem")
                        .HasForeignKey("Database.Models.PromotionSystem", "LeagueName", "Season")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("Database.Models.Team", b =>
                {
                    b.HasOne("Database.Models.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueName", "Season")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("Database.Models.Competition", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Database.Models.CompetitionRound", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Database.Models.CompetitionRoundFixture", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Database.Models.CompetitionRoundGameDay", b =>
                {
                    b.Navigation("Fixtures");
                });

            modelBuilder.Entity("Database.Models.CompetitionRoundGroup", b =>
                {
                    b.Navigation("GameDays");
                });

            modelBuilder.Entity("Database.Models.Continent", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Database.Models.Country", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("Database.Models.Division", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("Database.Models.League", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("GameDays");

                    b.Navigation("LeagueFixtures");

                    b.Navigation("PromotionSystem");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Database.Models.LeagueFixture", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Database.Models.LeagueGameDay", b =>
                {
                    b.Navigation("Fixtures");
                });

            modelBuilder.Entity("Database.Models.Team", b =>
                {
                    b.Navigation("AwayCompetitionFixtures");

                    b.Navigation("AwayLeagueFixtures");

                    b.Navigation("CompetitionFixtureEvents");

                    b.Navigation("HomeCompetitionFixtures");

                    b.Navigation("HomeLeagueFixtures");

                    b.Navigation("LeagueFixtureEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
